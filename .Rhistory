head(cars)
names(cars)
cars[0]
cars[1]
names(cars)
cars$speed
head(cars)
sum(cars$dist)
fix(cars)
str(cars)
summary(cars$speed)
range(cars$speed)
quantile(cars$speed)
help(rnorm)
help(c)
Age <- c(15, 17, 16, 15, 16)
English<- c(40, 56, 30, 68, 35)
Science<- c(85, 80, 74, 39, 65)
Total <- English + Science
Total
Age[2:3]
Name<- c("John", "Bob", "Kevin", "Smith", "Rick")
Profile <- data.frame(Name, Age)
Profile
str(Profile)
help(str)
is.data.frame(Profile)
names(Profile)
head(Profile)
tail(Profile)
Profile$Name
str(Profile$Name)
str(Profile[1])
x <- Profile[1]
x
x <- Profile[1,]
x
str(x)
Profile[,1]
Students <- data.frame(Name, Age, English, Science)
x<-Students$Name
x
str(x)
y<-Students["Name"]
y
str(y)
z<-Students[,1]
z
str(z)
data()
cars
AirPassengers
data()
help(lm)
head(cars)
reg_model<-lm(cars$dist~cars$speed)
str(reg_model)
summary(reg_model)
reg_model[1]
Income<- c(5500, 6700, 8970, 5634)
Tax<-0.2
Year<-2015
Company<-"DataVedi"
Net_income<- Income*(1-Tax)
Emp_name<-c("Redd", "Kenn", "Finn", "Scott")
Emp_database<-data.frame(Net_income, Emp_name)
Emp_db_list<-list(Income,Tax, Year, Company, Emp_database)
Emp_db_list
Emp_database
print(Emp_database)
library(readr)
Sales_sample <- read_csv("~/Books/StInfer/R/data/02-Data-Handling/DataHandling/Superstore Sales Data/Sales_sample.csv")
View(Sales_sample)
Print(Sales_sample)
print(Sales_sample)
summary(Sales_sample)
str(Sales_sample)
library(xlsx)
dim(Sales_sample)
head(Sales_sample)
names(Sales_sample)
head(Sales_sample, n=10)
str(Sales_sample)
class(Sales_sample)
is.data.frame(Sales_sample)
Sales_sample[1,]
Sales_sample[c(1,2,3),]
names(Sales_sample)
Sales_sample["custId", ]
Sales_sample[, "custId"]
Sales_sample[, c("custId","productSold")]
names(Sales_sample)
Sales_sample[, c(1,4)]
subset(Sales_sample, (salesChannel="Retail"))
subset(Sales_sample, (salesChannel=="Retail"))
subset(Sales_sample, (salesChannel=="Retail"))[,"SalesChannel"]
subset(Sales_sample, (salesChannel=="Retail"))["SalesChannel",]
subset(Sales_sample, (salesChannel=="Retail"))[,"salesChannel"]
cars
plot(cars)
mean(cars$speed)
median(cars$speed)
mode(cars$speed)
md
help(mode)
help(mean)
rabbitLateness <- c(40, 30, 20, 45, 60, 120, 35, 40,50, 55, 53, 22, 27, 48, 62, 33, 35, 40 ,45)
range(rabbitLateness)
quantile(rabbitLateness)
seq(range(rabbitLateness), by=10)
seq(20,130, by=10)
bins = seq(20,130, by=10)
cut(rabbitLateness, bins, right=FALSE)
intervals <- cut(rabbitLateness, bins, right=FALSE)
table(intervals)
view(intervals)
View
View(intervals)
plot(table(intervals), type="h")
plot(table(intervals), type="h", xlab="Intervals", ylab="Frequency")
hist(rabbitLateness,breaks = bins)
plot(table(intervals), type="h", xlab="Intervals", ylab="Frequency")
hist(rabbitLateness,breaks = bins)
min(rabbitLateness)
max(rabbitLateness)
rabbitLateness
range(rabbitLateness)
intervals <- cut(rabbitLateness, bins, right=FALSE)
intervals
str(intervals)
intervals[1]
Age <- c(15, 17, 16, 15, 16)
English<- c(40, 56, 30, 68, 35)
Science<- c(85, 80, 74, 39, 65)
Name<- c("John", "Bob", "Kevin", "Smith", "Rick")
Students <- data.frame(Name, Age, English, Science)
Profile = c(Students$Name, Students$Age)
Profile
Profile = data.frame(Students$Name, Students$Age)
Profile
names(Profiles)
names(Profile)
names(Profiles)[1] = "Name"
names(Profile)[1] = "Name"
names(Profile)[2] = "Age"
Profile
library(readr)
AirPassengers <- read_csv("~/Desktop/R & MachineLearning/AirPassengers.csv")
View(AirPassengers)
summary(AirPassengers)
str(AirPassengers)
cor(AirPassengers$Week_num, AirPassengers$Passengers)
cor(AirPassengers$Promotion_Budget, AirPassengers$Passengers)
install.packages("rpart")
library(readr)
Fiberbits <- read_csv("~/Downloads/MSCV/Fiberbits/Fiberbits.csv")
View(Fiberbits)
names(Fiberbits)
Fiberbits_model_1<-glm(active_cust~.,family=binomial(),data=Fiberbits)
summary(Fiberbits_model_1)
library(caret)
threshold=0.5
predicted_values<-ifelse(predict(Fiberbits_model_1,type="response")>threshold,1,0)
table(predicted_values)
actual_values<-Fiberbits_model_1$y
conf_matrix<-table(actual_values,predicted_values)
conf_matrix
sensitivity(conf_matrix)
specificity(conf_matrix)
threshold=0.8
predicted_values<-ifelse(predict(Fiberbits_model_1,type="response")>threshold,1,0)
table(predicted_values)
actual_values<-Fiberbits_model_1$y
conf_matrix<-table(actual_values,predicted_values)
conf_matrix
sensitivity(conf_matrix)
specificity(conf_matrix)
threshold=0.3
predicted_values<-ifelse(predict(Fiberbits_model_1,type="response")>threshold,1,0)
table(predicted_values)
actual_values<-Fiberbits_model_1$y
conf_matrix<-table(actual_values,predicted_values)
conf_matrix
sensitivity(conf_matrix)
specificity(conf_matrix)
setwd("~/Desktop/R & MachineLearning/RandomForest")
bank_data <- read.table("bank.csv", header=TRUE,sep=";")
str(bank_data)
summary(bank_data)
head(bank_data)
new_data <-bank_data[, c(1:4,7:9,12,14,15,17)]
str(new_data)
new_data$age <- cut(new_data$age, c(1,20,40,60,100))
new_data$is_divorced <- ifelse( new_data$marital == "divorced", 1, 0)
new_data$is_single <- ifelse( new_data$marital == "single", 1, 0)
new_data$is_married <- ifelse( new_data$marital == "married", 1, 0)
new_data$marital <- NULL
str(new_data)
par(mfrow=c(2,2),las=2)
plot( new_data$housing, new_data$y,xlab="Housing", ylab="Become Customer?", col=c("darkgreen","red"))
plot( new_data$contact, new_data$y,xlab="Contact Type", ylab="Become Customer?", col=c("darkgreen","red"))
boxplot( duration ~ y, data=new_data,col="blue")
boxplot( pdays ~ y, data=new_data,col="maroon")
par(mfrow=c(2,2),las=2)
plot( new_data$housing, new_data$y,xlab="Housing", ylab="Become Customer?", col=c("darkgreen","red"))
plot( new_data$contact, new_data$y,xlab="Contact Type", ylab="Become Customer?", col=c("darkgreen","red"))
boxplot( duration ~ y, data=new_data,col="blue")
boxplot( pdays ~ y, data=new_data,col="maroon")
library(caret)
inTrain <- createDataPartition(y=new_data$y ,p=0.7,list=FALSE)
training <- new_data[inTrain,]
testing <- new_data[-inTrain,]
dim(training);dim(testing)
table(training$y); table(testing$y)
install.packages("randomForest")
library(randomForest)
model <- randomForest(y ~ ., data=training)
model
importance(model)
library(caret)
predicted <- predict(model, testing)
table(predicted)
confusionMatrix(predicted, testing$y)
accuracy=c()
for (i in seq(1,50, by=1)) {
modFit <- randomForest(y ~ ., data=training, ntree=i)
accuracy <- c(accuracy, confusionMatrix(predict(modFit, testing, type="class"), testing$)$overall[1])
}
par(mfrow=c(1,1))
plot(x=seq(1,50, by=1), y=accuracy, type="l", col="red", main="Effect of increasing tree size", xlab="Tree Size", ylab="Accuracy")
accuracy=c()
for (i in seq(1,50, by=1)) {
modFit <- randomForest(y ~ ., data=training, ntree=i)
accuracy <- c(accuracy, confusionMatrix(predict(modFit, testing, type="class"), testing$y)$overall[1])
}
par(mfrow=c(1,1))
plot(x=seq(1,50, by=1), y=accuracy, type="l", col="red", main="Effect of increasing tree size", xlab="Tree Size", ylab="Accuracy")
model
predicted <- predict(model, testing)
predicted
str(predicted)
str(model)
x <- confusionMatrix(predicted, testing$y)
str(x)
setwd("~/Desktop/R & MachineLearning/AssociationRulesMining")
accident_data <- read.csv("accidents.csv")
str(accident_data)
str(accident_data)
summary(accident_data)
summary(accident_data)
colnames
basket_str <- ""
for ( row in 1:nrow(accident_data)) {
if ( row != 1) {
basket_str <- paste0(basket_str, "\n")
}
basket_str <- paste0(basket_str, row,",")
for (col in 2:length(colnames)) {
if ( col != 2) {
basket_str <- paste0(basket_str, ",") }
basket_str <- paste0(basket_str, colnames[col],"=",accident_data[row,col])
}
}
for ( row in 1:nrow(accident_data)) {
if ( row != 1) {
basket_str <- paste0(basket_str, "\n")
}
basket_str <- paste0(basket_str, row,",")
for (col in 2:length(colnames)) {
if ( col != 2) {
basket_str <- paste0(basket_str, ",")
}
basket_str <- paste0(basket_str, colnames[col],"=",accident_data[row,col])
}
}
names(accident_data)
colnames <- names(accident_data)
basket_str <- ""
for ( row in 1:nrow(accident_data)) {
if ( row != 1) {
basket_str <- paste0(basket_str, "\n")
}
basket_str <- paste0(basket_str, row,",")
for (col in 2:length(colnames)) {
if ( col != 2) {
basket_str <- paste0(basket_str, ",")
}
basket_str <- paste0(basket_str, colnames[col],"=",accident_data[row,col])
}
}
basket_str <- ""
for ( row in 1:nrow(accident_data)) {
if ( row != 1) {
basket_str <- paste0(basket_str, "\n")
}
basket_str <- paste0(basket_str, row,",")
for (col in 2:length(colnames)) {
if ( col != 2) {
basket_str <- paste0(basket_str, ",")
}
basket_str <- paste0(basket_str, colnames[col],"=",accident_data[row,col])
}
}
write(basket_str,"accidents_basket.csv")
install.packages("arules")
accidents <- read.transactions("accidents_basket.csv",sep=",")
accidents <- read.transactions("accidents_basket.csv",sep=",")
library(arules)
accidents <- read.transactions("accidents_basket.csv",sep=",")
summary(accidents)
str(accident_data)
accident_data
accident_data
itemFrequencyPlot(accidents,topN=10,type="absolute", col="darkgreen", horiz=TRUE)
rules <- apriori(accidents, parameter=list(supp=0.1, conf=0.3))
inspect(rules[1:40])
inspect(rules[21732:21772])
str(rules)
rules <- apriori(accidents, parameter=list(supp=0.2, conf=0.3))
inspect(rules[1:40])
bagFDA()
LogitBoost
install.packages("caTools")
nnet
install.packages("nnet")
install.packages("nnet")
svmRadialCost
library("e1071")
svmRadialCost
install.packages("car")
library(svmRadialCost)
library(caret)
svmRadialCost
library(plyr)
library(recipes)
library(dplyr)
library(plyr)
library(recipes)
library(dplyr)
svmRadialCost
setwd("~/Desktop/R & MachineLearning")
cancer_data <- read.csv("breast_cancer.csv")
View(cancer_data)
scaled_data <- scale(cancer_data[, 3:32])
pca_data <- prcomp(scaled_data)
plot(pca_data)
scaled_data <- scale(cancer_data[, 3:32])
pca_data <- prcomp(scaled_data)
plot(pca_data)
#Get only the first 3 components
final_data <- data.frame(pca_data$x[,1:3])
str(pca_data)
names(pca_data)
final_data$diagnosis <- cancer_data$diagnosis
pairs.panels(final_data)
library(psych)
pairs.panels(final_data)
inTrain <- createDataPartition(y=final_data$diagnosis ,p=0.7,list=FALSE)
training <- final_data[inTrain,]
testing <- final_data[-inTrain,]
dim(training);dim(testing)
library(car)
library(nnet)
library(caTools)
predlist <- c("bagFDA","LogitBoost", "nnet", "svmRadialCost")
results <- data.frame( Algorithm=character(), Duration=numeric(), Accuracy=numeric(), stringsAsFactors=FALSE)
for (i in 1:length(predlist)) {
pred <- predlist[i]
print(paste("Algorithm = ",pred ))
#Measure Time
startTime <- as.integer(Sys.time())
#Build model
model <- train( diagnosis ~ ., data=training, method=pred) #Predict
predicted <- predict(model, testing)
#Compare results
matrix<- confusionMatrix(predicted, testing$diagnosis)
#Measure end time
endTime <- as.integer(Sys.time())
#Store result
thisresult <- c( as.character(pred), endTime-startTime, as.numeric(matrix$overall[1])) results[i,1] <- pred
results[i,2] <- endTime-startTime
results[i,3] <- round(as.numeric(matrix$overall[1]) * 100, 2)
}
for (i in 1:length(predlist)) {
pred <- predlist[i]
print(paste("Algorithm = ",pred ))
#Measure Time
startTime <- as.integer(Sys.time())
#Build model
model <- train( diagnosis ~ ., data=training, method=pred) #Predict
predicted <- predict(model, testing)
#Compare results
matrix<- confusionMatrix(predicted, testing$diagnosis)
#Measure end time
endTime <- as.integer(Sys.time())
#Store result
thisresult <- c( as.character(pred), endTime-startTime, as.numeric(matrix$overall[1]))
results[i,1] <- pred
results[i,2] <- endTime-startTime
results[i,3] <- round(as.numeric(matrix$overall[1]) * 100, 2)
}
for (i in 1:length(predlist)) {
pred <- predlist[i]
print(paste("Algorithm = ",pred ))
#Measure Time
startTime <- as.integer(Sys.time())
#Build model
model <- train( diagnosis ~ ., data=training, method=pred) #Predict
predicted <- predict(model, testing)
#Compare results
matrix<- confusionMatrix(predicted, testing$diagnosis)
#Measure end time
endTime <- as.integer(Sys.time())
#Store result
thisresult <- c( as.character(pred), endTime-startTime, as.numeric(matrix$overall[1]))
results[i,1] <- pred
results[i,2] <- endTime-startTime
results[i,3] <- round(as.numeric(matrix$overall[1]) * 100, 2)
}
predlist <- c("LogitBoost", "nnet", "svmRadialCost")
results <- data.frame( Algorithm=character(), Duration=numeric(), Accuracy=numeric(), stringsAsFactors=FALSE)
for (i in 1:length(predlist)) {
pred <- predlist[i]
print(paste("Algorithm = ",pred ))
#Measure Time
startTime <- as.integer(Sys.time())
#Build model
model <- train( diagnosis ~ ., data=training, method=pred) #Predict
predicted <- predict(model, testing)
#Compare results
matrix<- confusionMatrix(predicted, testing$diagnosis)
#Measure end time
endTime <- as.integer(Sys.time())
#Store result
thisresult <- c( as.character(pred), endTime-startTime, as.numeric(matrix$overall[1]))
results[i,1] <- pred
results[i,2] <- endTime-startTime
results[i,3] <- round(as.numeric(matrix$overall[1]) * 100, 2)
}
predlist <- c("LogitBoost", "nnet", "svmRadialCost")
str(results)
predlist <- c("bagFDA"")
#Create a result data set
results <- data.frame( Algorithm=character(), Duration=numeric(), Accuracy=numeric(), stringsAsFactors=FALSE)
#loop through algorithm list and perform model building and prediction
for (i in 1:length(predlist)) {
pred <- predlist[i]
print(paste("Algorithm = ",pred ))
#Measure Time
startTime <- as.integer(Sys.time())
#Build model
model <- train( diagnosis ~ ., data=training, method=pred) #Predict
predicted <- predict(model, testing)
#Compare results
matrix<- confusionMatrix(predicted, testing$diagnosis)
#Measure end time
endTime <- as.integer(Sys.time())
#Store result
thisresult <- c( as.character(pred), endTime-startTime, as.numeric(matrix$overall[1]))
results[i,1] <- pred
results[i,2] <- endTime-startTime
results[i,3] <- round(as.numeric(matrix$overall[1]) * 100, 2)
}
#Print results
#results
predlist <- c("bagFDA")
results <- data.frame( Algorithm=character(), Duration=numeric(), Accuracy=numeric(), stringsAsFactors=FALSE)
for (i in 1:length(predlist)) {
pred <- predlist[i]
print(paste("Algorithm = ",pred ))
#Measure Time
startTime <- as.integer(Sys.time())
#Build model
model <- train( diagnosis ~ ., data=training, method=pred) #Predict
predicted <- predict(model, testing)
#Compare results
matrix<- confusionMatrix(predicted, testing$diagnosis)
#Measure end time
endTime <- as.integer(Sys.time())
#Store result
thisresult <- c( as.character(pred), endTime-startTime, as.numeric(matrix$overall[1]))
results[i,1] <- pred
results[i,2] <- endTime-startTime
results[i,3] <- round(as.numeric(matrix$overall[1]) * 100, 2)
}
